Index: src/creator.c
--- src/creator.c.orig
+++ src/creator.c
@@ -9,7 +9,6 @@
 #include <fcntl.h>
 #include <inttypes.h>
 #include <limits.h>
-#include <mntent.h>
 #include <netinet/in.h>
 #include <netinet/ip.h>
 #include <stdlib.h>
@@ -20,6 +19,105 @@
 
 #include "efiboot.h"
 
+/*
+ *  mntent
+ *  mntent.h - compatibility header for FreeBSD
+ *
+ *  Copyright (c) 2001 David Rufino <daverufino@btinternet.com>
+ *  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include <stddef.h>
+#include <stdio.h>
+
+#define MOUNTED "dummy"
+
+#define MNTTYPE_NFS "nfs"
+
+struct mntent
+{
+	char *mnt_fsname;
+	char *mnt_dir;
+	char *mnt_type;
+	int mnt_freq;
+	int mnt_passno;
+};
+
+#define setmntent(x,y) ((FILE *)0x1)
+struct mntent * getmntent(FILE *fp);
+#define endmntent(x) ((int)1)
+
+#include <sys/param.h>
+#include <sys/ucred.h>
+#include <sys/mount.h>
+
+#include <stdlib.h>
+#include <string.h>
+
+#ifdef __NetBSD__
+#define statfs statvfs
+#endif
+
+static struct mntent * statfs_to_mntent(struct statfs *mntbuf);
+
+struct mntent *
+getmntent(FILE *fp)
+{
+	static int pos = -1;
+	static int mntsize = -1;
+
+	static struct statfs *mntbuf;
+
+	(void)fp;
+
+	if(pos == -1 || mntsize == -1)
+	{
+		mntsize = getmntinfo(&mntbuf, MNT_NOWAIT);
+	}
+
+	pos++;
+	if(pos == mntsize)
+	{
+		pos = mntsize = -1;
+		return NULL;
+	}
+
+	return statfs_to_mntent(&mntbuf[pos]);
+}
+
+static struct mntent *
+statfs_to_mntent(struct statfs *mntbuf)
+{
+	static struct mntent _mntent;
+
+	_mntent.mnt_fsname = mntbuf->f_mntfromname;
+	_mntent.mnt_dir = mntbuf->f_mntonname;
+	_mntent.mnt_type = mntbuf->f_fstypename;
+	_mntent.mnt_freq = _mntent.mnt_passno = 0;
+	return &_mntent;
+}
+
 static int NONNULL(1, 2, 3)
 find_file(const char * const filepath, char **devicep, char **relpathp)
 {
@@ -60,7 +158,7 @@ find_file(const char * const filepath, char **devicep,
 		}
 	} while (1);
 
-	mounts = fopen("/proc/self/mounts", "r");
+	mounts = setmntent("/proc/self/mounts", "r");
 	if (mounts == NULL) {
 		efi_error("couldn not open /proc/self/mounts");
 		return -1;
@@ -119,8 +217,9 @@ find_file(const char * const filepath, char **devicep,
 		}
 	}
 err:
-	if (mounts)
-		endmntent(mounts);
+	if (mounts) {
+		(void)endmntent(mounts);
+	}
 	return ret;
 }
 
